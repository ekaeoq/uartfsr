
sensor_cap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b0c  08003b0c  00004b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b78  08003b78  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b78  08003b78  00004b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b80  08003b80  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b80  08003b80  00004b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b84  08003b84  00004b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b88  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  08003be4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003be4  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008424  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015da  00000000  00000000  0000d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0000ea90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000578  00000000  00000000  0000f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001687f  00000000  00000000  0000f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000913e  00000000  00000000  00025faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910be  00000000  00000000  0002f0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c01ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a8  00000000  00000000  000c01f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c2498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003af4 	.word	0x08003af4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003af4 	.word	0x08003af4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	0000      	movs	r0, r0
	...

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b092      	sub	sp, #72	@ 0x48
 8000db4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db6:	f000 fb25 	bl	8001404 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dba:	f000 f8d3 	bl	8000f64 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8000dbe:	f000 f9ab 	bl	8001118 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dc2:	f000 f92d 	bl	8001020 <MX_ADC1_Init>
  HAL_ADC_Start(&hadc1);
 8000dc6:	485e      	ldr	r0, [pc, #376]	@ (8000f40 <main+0x190>)
 8000dc8:	f000 fbf6 	bl	80015b8 <HAL_ADC_Start>
  MX_USART2_UART_Init();
 8000dcc:	f000 f97a 	bl	80010c4 <MX_USART2_UART_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd0:	f000 f9a2 	bl	8001118 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dd4:	f000 f924 	bl	8001020 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000dd8:	f000 f974 	bl	80010c4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8000ddc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000de0:	4857      	ldr	r0, [pc, #348]	@ (8000f40 <main+0x190>)
 8000de2:	f000 fc9d 	bl	8001720 <HAL_ADC_PollForConversion>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f040 8099 	bne.w	8000f20 <main+0x170>
	          {
	              adc_value = HAL_ADC_GetValue(&hadc1);  // Read ADC value
 8000dee:	4854      	ldr	r0, [pc, #336]	@ (8000f40 <main+0x190>)
 8000df0:	f000 fd21 	bl	8001836 <HAL_ADC_GetValue>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a53      	ldr	r2, [pc, #332]	@ (8000f44 <main+0x194>)
 8000df8:	6013      	str	r3, [r2, #0]
	              Vout = (adc_value / 4095.0) * 3.3;     // Convert to voltage
 8000dfa:	4b52      	ldr	r3, [pc, #328]	@ (8000f44 <main+0x194>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fb80 	bl	8000504 <__aeabi_ui2d>
 8000e04:	a348      	add	r3, pc, #288	@ (adr r3, 8000f28 <main+0x178>)
 8000e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0a:	f7ff fd1f 	bl	800084c <__aeabi_ddiv>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	a346      	add	r3, pc, #280	@ (adr r3, 8000f30 <main+0x180>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f7ff fbec 	bl	80005f8 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f7ff fdf8 	bl	8000a1c <__aeabi_d2f>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a46      	ldr	r2, [pc, #280]	@ (8000f48 <main+0x198>)
 8000e30:	6013      	str	r3, [r2, #0]
	              R_FSR = 10000 * ((3.3 / Vout) - 1);    // Calculate FSR resistance
 8000e32:	4b45      	ldr	r3, [pc, #276]	@ (8000f48 <main+0x198>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fb86 	bl	8000548 <__aeabi_f2d>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	a13b      	add	r1, pc, #236	@ (adr r1, 8000f30 <main+0x180>)
 8000e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e46:	f7ff fd01 	bl	800084c <__aeabi_ddiv>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b3d      	ldr	r3, [pc, #244]	@ (8000f4c <main+0x19c>)
 8000e58:	f7ff fa16 	bl	8000288 <__aeabi_dsub>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	a334      	add	r3, pc, #208	@ (adr r3, 8000f38 <main+0x188>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fbc5 	bl	80005f8 <__aeabi_dmul>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fdd1 	bl	8000a1c <__aeabi_d2f>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a34      	ldr	r2, [pc, #208]	@ (8000f50 <main+0x1a0>)
 8000e7e:	6013      	str	r3, [r2, #0]


	              /*int len = sprintf(buffer, "Vout: %.3f, R_FSR: %.3f\n", Vout, R_FSR);*/
	              int vout_int = (int)(Vout * 1000);
 8000e80:	4b31      	ldr	r3, [pc, #196]	@ (8000f48 <main+0x198>)
 8000e82:	edd3 7a00 	vldr	s15, [r3]
 8000e86:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000f54 <main+0x1a4>
 8000e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e92:	ee17 3a90 	vmov	r3, s15
 8000e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
	              int r_fsr_int = (int)(R_FSR * 1000);
 8000e98:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <main+0x1a0>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000f54 <main+0x1a4>
 8000ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eaa:	ee17 3a90 	vmov	r3, s15
 8000eae:	63bb      	str	r3, [r7, #56]	@ 0x38
	              char buffer[50];
	              int len = sprintf(buffer, "Vout: %d.%03d, R_FSR: %d.%03d\n",
 8000eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eb2:	4a29      	ldr	r2, [pc, #164]	@ (8000f58 <main+0x1a8>)
 8000eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb8:	1192      	asrs	r2, r2, #6
 8000eba:	17db      	asrs	r3, r3, #31
 8000ebc:	1ad5      	subs	r5, r2, r3
 8000ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ec0:	4a25      	ldr	r2, [pc, #148]	@ (8000f58 <main+0x1a8>)
 8000ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec6:	1191      	asrs	r1, r2, #6
 8000ec8:	17da      	asrs	r2, r3, #31
 8000eca:	1a89      	subs	r1, r1, r2
 8000ecc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ed0:	fb01 f202 	mul.w	r2, r1, r2
 8000ed4:	1a99      	subs	r1, r3, r2
 8000ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f58 <main+0x1a8>)
 8000eda:	fb82 0203 	smull	r0, r2, r2, r3
 8000ede:	1192      	asrs	r2, r2, #6
 8000ee0:	17db      	asrs	r3, r3, #31
 8000ee2:	1ad0      	subs	r0, r2, r3
 8000ee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <main+0x1a8>)
 8000ee8:	fb83 4302 	smull	r4, r3, r3, r2
 8000eec:	119c      	asrs	r4, r3, #6
 8000eee:	17d3      	asrs	r3, r2, #31
 8000ef0:	1ae3      	subs	r3, r4, r3
 8000ef2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8000ef6:	fb04 f303 	mul.w	r3, r4, r3
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	463c      	mov	r4, r7
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	9000      	str	r0, [sp, #0]
 8000f02:	460b      	mov	r3, r1
 8000f04:	462a      	mov	r2, r5
 8000f06:	4915      	ldr	r1, [pc, #84]	@ (8000f5c <main+0x1ac>)
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f002 f953 	bl	80031b4 <siprintf>
 8000f0e:	6378      	str	r0, [r7, #52]	@ 0x34
	                                vout_int / 1000, vout_int % 1000,
	                                r_fsr_int / 1000, r_fsr_int % 1000);
	              HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8000f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4639      	mov	r1, r7
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1a:	4811      	ldr	r0, [pc, #68]	@ (8000f60 <main+0x1b0>)
 8000f1c:	f001 fdd5 	bl	8002aca <HAL_UART_Transmit>
	          }
	          HAL_Delay(100);  // 10 Hz sampling
 8000f20:	2064      	movs	r0, #100	@ 0x64
 8000f22:	f000 fae1 	bl	80014e8 <HAL_Delay>
	  if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8000f26:	e759      	b.n	8000ddc <main+0x2c>
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	40affe00 	.word	0x40affe00
 8000f30:	66666666 	.word	0x66666666
 8000f34:	400a6666 	.word	0x400a6666
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	40c38800 	.word	0x40c38800
 8000f40:	20000078 	.word	0x20000078
 8000f44:	20000104 	.word	0x20000104
 8000f48:	20000108 	.word	0x20000108
 8000f4c:	3ff00000 	.word	0x3ff00000
 8000f50:	2000010c 	.word	0x2000010c
 8000f54:	447a0000 	.word	0x447a0000
 8000f58:	10624dd3 	.word	0x10624dd3
 8000f5c:	08003b0c 	.word	0x08003b0c
 8000f60:	200000c0 	.word	0x200000c0

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	@ 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 f93e 	bl	80031f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <SystemClock_Config+0xb4>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a21      	ldr	r2, [pc, #132]	@ (8001018 <SystemClock_Config+0xb4>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <SystemClock_Config+0xb4>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <SystemClock_Config+0xb8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <SystemClock_Config+0xb8>)
 8000fae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <SystemClock_Config+0xb8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 f8d3 	bl	8002180 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fe0:	f000 f8b4 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fb36 	bl	8002670 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800100a:	f000 f89f 	bl	800114c <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	@ 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <MX_ADC1_Init+0x9c>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105e:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001060:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <MX_ADC1_Init+0xa0>)
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800106c:	2201      	movs	r2, #1
 800106e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800107a:	2201      	movs	r2, #1
 800107c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107e:	480e      	ldr	r0, [pc, #56]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001080:	f000 fa56 	bl	8001530 <HAL_ADC_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 f85f 	bl	800114c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	@ (80010b8 <MX_ADC1_Init+0x98>)
 80010a0:	f000 fbd6 	bl	8001850 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010aa:	f000 f84f 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000078 	.word	0x20000078
 80010bc:	40012000 	.word	0x40012000
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <MX_USART2_UART_Init+0x50>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010fc:	f001 fc98 	bl	8002a30 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001106:	f000 f821 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200000c0 	.word	0x200000c0
 8001114:	40004400 	.word	0x40004400

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_GPIO_Init+0x30>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a08      	ldr	r2, [pc, #32]	@ (8001148 <MX_GPIO_Init+0x30>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_GPIO_Init+0x30>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <Error_Handler+0x8>

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	4a0f      	ldr	r2, [pc, #60]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116c:	6453      	str	r3, [r2, #68]	@ 0x44
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <HAL_ADC_MspInit+0x7c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d127      	bne.n	800121a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <HAL_ADC_MspInit+0x80>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <HAL_ADC_MspInit+0x80>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <HAL_ADC_MspInit+0x80>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <HAL_ADC_MspInit+0x80>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001228 <HAL_ADC_MspInit+0x80>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_ADC_MspInit+0x80>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <HAL_ADC_MspInit+0x84>)
 8001216:	f000 fe2f 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40012000 	.word	0x40012000
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a19      	ldr	r2, [pc, #100]	@ (80012b4 <HAL_UART_MspInit+0x84>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d12b      	bne.n	80012aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <HAL_UART_MspInit+0x88>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	4a17      	ldr	r2, [pc, #92]	@ (80012b8 <HAL_UART_MspInit+0x88>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001260:	6413      	str	r3, [r2, #64]	@ 0x40
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_UART_MspInit+0x88>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_UART_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <HAL_UART_MspInit+0x88>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_UART_MspInit+0x88>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800128a:	230c      	movs	r3, #12
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129a:	2307      	movs	r3, #7
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <HAL_UART_MspInit+0x8c>)
 80012a6:	f000 fde7 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	@ 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <NMI_Handler+0x4>

080012c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <MemManage_Handler+0x4>

080012d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001316:	f000 f8c7 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f001 ff58 	bl	8003204 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20020000 	.word	0x20020000
 8001380:	00000400 	.word	0x00000400
 8001384:	20000110 	.word	0x20000110
 8001388:	20000260 	.word	0x20000260

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b4:	480d      	ldr	r0, [pc, #52]	@ (80013ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013b6:	490e      	ldr	r1, [pc, #56]	@ (80013f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b8:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013cc:	4c0b      	ldr	r4, [pc, #44]	@ (80013fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013da:	f7ff ffd7 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f001 ff17 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fce5 	bl	8000db0 <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013f4:	08003b88 	.word	0x08003b88
  ldr r2, =_sbss
 80013f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013fc:	20000260 	.word	0x20000260

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <HAL_Init+0x40>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_Init+0x40>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_Init+0x40>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 fcef 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fe8e 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fcf9 	bl	8001e5e <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001484:	f000 fccf 	bl	8001e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000114 	.word	0x20000114

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000114 	.word	0x20000114

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008

08001530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e033      	b.n	80015ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fe2a 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001576:	f023 0302 	bic.w	r3, r3, #2
 800157a:	f043 0202 	orr.w	r2, r3, #2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 fa96 	bl	8001ab4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f023 0303 	bic.w	r3, r3, #3
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
 800159e:	e001      	b.n	80015a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_Start+0x1a>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e097      	b.n	8001702 <HAL_ADC_Start+0x14a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d018      	beq.n	800161a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015f8:	4b45      	ldr	r3, [pc, #276]	@ (8001710 <HAL_ADC_Start+0x158>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a45      	ldr	r2, [pc, #276]	@ (8001714 <HAL_ADC_Start+0x15c>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9a      	lsrs	r2, r3, #18
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800160c:	e002      	b.n	8001614 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3b01      	subs	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f9      	bne.n	800160e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b01      	cmp	r3, #1
 8001626:	d15f      	bne.n	80016e8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001652:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001666:	d106      	bne.n	8001676 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166c:	f023 0206 	bic.w	r2, r3, #6
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	645a      	str	r2, [r3, #68]	@ 0x44
 8001674:	e002      	b.n	800167c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <HAL_ADC_Start+0x160>)
 8001686:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001690:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d129      	bne.n	8001700 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	e020      	b.n	8001700 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <HAL_ADC_Start+0x164>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d11b      	bne.n	8001700 <HAL_ADC_Start+0x148>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d114      	bne.n	8001700 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	e00b      	b.n	8001700 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	f043 0210 	orr.w	r2, r3, #16
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000000 	.word	0x20000000
 8001714:	431bde83 	.word	0x431bde83
 8001718:	40012300 	.word	0x40012300
 800171c:	40012000 	.word	0x40012000

08001720 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800173c:	d113      	bne.n	8001766 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800174c:	d10b      	bne.n	8001766 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f043 0220 	orr.w	r2, r3, #32
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e063      	b.n	800182e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001766:	f7ff feb3 	bl	80014d0 <HAL_GetTick>
 800176a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800176c:	e021      	b.n	80017b2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001774:	d01d      	beq.n	80017b2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <HAL_ADC_PollForConversion+0x6c>
 800177c:	f7ff fea8 	bl	80014d0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d212      	bcs.n	80017b2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b02      	cmp	r3, #2
 8001798:	d00b      	beq.n	80017b2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	f043 0204 	orr.w	r2, r3, #4
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e03d      	b.n	800182e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d1d6      	bne.n	800176e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0212 	mvn.w	r2, #18
 80017c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d123      	bne.n	800182c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d11f      	bne.n	800182c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001804:	2b00      	cmp	r3, #0
 8001806:	d111      	bne.n	800182c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x1c>
 8001868:	2302      	movs	r3, #2
 800186a:	e113      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x244>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b09      	cmp	r3, #9
 800187a:	d925      	bls.n	80018c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68d9      	ldr	r1, [r3, #12]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	3b1e      	subs	r3, #30
 8001892:	2207      	movs	r2, #7
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43da      	mvns	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	400a      	ands	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68d9      	ldr	r1, [r3, #12]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4403      	add	r3, r0
 80018ba:	3b1e      	subs	r3, #30
 80018bc:	409a      	lsls	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	e022      	b.n	800190e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	2207      	movs	r2, #7
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	400a      	ands	r2, r1
 80018ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6919      	ldr	r1, [r3, #16]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4403      	add	r3, r0
 8001904:	409a      	lsls	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b06      	cmp	r3, #6
 8001914:	d824      	bhi.n	8001960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b05      	subs	r3, #5
 8001928:	221f      	movs	r2, #31
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	400a      	ands	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b05      	subs	r3, #5
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	@ 0x34
 800195e:	e04c      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d824      	bhi.n	80019b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b23      	subs	r3, #35	@ 0x23
 800197a:	221f      	movs	r2, #31
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43da      	mvns	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	400a      	ands	r2, r1
 8001988:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b23      	subs	r3, #35	@ 0x23
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80019b0:	e023      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	3b41      	subs	r3, #65	@ 0x41
 80019c4:	221f      	movs	r2, #31
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	400a      	ands	r2, r1
 80019d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b41      	subs	r3, #65	@ 0x41
 80019ee:	fa00 f203 	lsl.w	r2, r0, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fa:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x250>)
 80019fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a28      	ldr	r2, [pc, #160]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x254>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d10f      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d8>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b12      	cmp	r3, #18
 8001a0e:	d10b      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x254>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12b      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x258>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x1f4>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b11      	cmp	r3, #17
 8001a42:	d122      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x258>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d111      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_ADC_ConfigChannel+0x25c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x260>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0c9a      	lsrs	r2, r3, #18
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	10000012 	.word	0x10000012
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001abc:	4b79      	ldr	r3, [pc, #484]	@ (8001ca4 <ADC_Init+0x1f0>)
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	021a      	lsls	r2, r3, #8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	4a58      	ldr	r2, [pc, #352]	@ (8001ca8 <ADC_Init+0x1f4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	e00f      	b.n	8001bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0202 	bic.w	r2, r2, #2
 8001bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7e1b      	ldrb	r3, [r3, #24]
 8001bcc:	005a      	lsls	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	035a      	lsls	r2, r3, #13
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	e007      	b.n	8001c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	051a      	lsls	r2, r3, #20
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c6a:	025a      	lsls	r2, r3, #9
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6899      	ldr	r1, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	029a      	lsls	r2, r3, #10
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	0f000001 	.word	0x0f000001

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	@ (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	@ (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff47 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e38:	f7ff ff5c 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6978      	ldr	r0, [r7, #20]
 8001e44:	f7ff ff8e 	bl	8001d64 <NVIC_EncodePriority>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff5d 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffb0 	bl	8001dcc <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e159      	b.n	8002148 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8148 	bne.w	8002142 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80a2 	beq.w	8002142 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b57      	ldr	r3, [pc, #348]	@ (8002160 <HAL_GPIO_Init+0x2e8>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	4a56      	ldr	r2, [pc, #344]	@ (8002160 <HAL_GPIO_Init+0x2e8>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200c:	6453      	str	r3, [r2, #68]	@ 0x44
 800200e:	4b54      	ldr	r3, [pc, #336]	@ (8002160 <HAL_GPIO_Init+0x2e8>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201a:	4a52      	ldr	r2, [pc, #328]	@ (8002164 <HAL_GPIO_Init+0x2ec>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a49      	ldr	r2, [pc, #292]	@ (8002168 <HAL_GPIO_Init+0x2f0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <HAL_GPIO_Init+0x202>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a48      	ldr	r2, [pc, #288]	@ (800216c <HAL_GPIO_Init+0x2f4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0x1fe>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a47      	ldr	r2, [pc, #284]	@ (8002170 <HAL_GPIO_Init+0x2f8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00d      	beq.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a46      	ldr	r2, [pc, #280]	@ (8002174 <HAL_GPIO_Init+0x2fc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <HAL_GPIO_Init+0x1f6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a45      	ldr	r2, [pc, #276]	@ (8002178 <HAL_GPIO_Init+0x300>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_GPIO_Init+0x1f2>
 8002066:	2304      	movs	r3, #4
 8002068:	e008      	b.n	800207c <HAL_GPIO_Init+0x204>
 800206a:	2307      	movs	r3, #7
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x204>
 800206e:	2303      	movs	r3, #3
 8002070:	e004      	b.n	800207c <HAL_GPIO_Init+0x204>
 8002072:	2302      	movs	r3, #2
 8002074:	e002      	b.n	800207c <HAL_GPIO_Init+0x204>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x204>
 800207a:	2300      	movs	r3, #0
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f002 0203 	and.w	r2, r2, #3
 8002082:	0092      	lsls	r2, r2, #2
 8002084:	4093      	lsls	r3, r2
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208c:	4935      	ldr	r1, [pc, #212]	@ (8002164 <HAL_GPIO_Init+0x2ec>)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209a:	4b38      	ldr	r3, [pc, #224]	@ (800217c <HAL_GPIO_Init+0x304>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020be:	4a2f      	ldr	r2, [pc, #188]	@ (800217c <HAL_GPIO_Init+0x304>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c4:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_GPIO_Init+0x304>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e8:	4a24      	ldr	r2, [pc, #144]	@ (800217c <HAL_GPIO_Init+0x304>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ee:	4b23      	ldr	r3, [pc, #140]	@ (800217c <HAL_GPIO_Init+0x304>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002112:	4a1a      	ldr	r2, [pc, #104]	@ (800217c <HAL_GPIO_Init+0x304>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002118:	4b18      	ldr	r3, [pc, #96]	@ (800217c <HAL_GPIO_Init+0x304>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800213c:	4a0f      	ldr	r2, [pc, #60]	@ (800217c <HAL_GPIO_Init+0x304>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3301      	adds	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b0f      	cmp	r3, #15
 800214c:	f67f aea2 	bls.w	8001e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3724      	adds	r7, #36	@ 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40013800 	.word	0x40013800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020400 	.word	0x40020400
 8002170:	40020800 	.word	0x40020800
 8002174:	40020c00 	.word	0x40020c00
 8002178:	40021000 	.word	0x40021000
 800217c:	40013c00 	.word	0x40013c00

08002180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e267      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d075      	beq.n	800228a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800219e:	4b88      	ldr	r3, [pc, #544]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d00c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021aa:	4b85      	ldr	r3, [pc, #532]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d112      	bne.n	80021dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b6:	4b82      	ldr	r3, [pc, #520]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021c2:	d10b      	bne.n	80021dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	4b7e      	ldr	r3, [pc, #504]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d05b      	beq.n	8002288 <HAL_RCC_OscConfig+0x108>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d157      	bne.n	8002288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e242      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e4:	d106      	bne.n	80021f4 <HAL_RCC_OscConfig+0x74>
 80021e6:	4b76      	ldr	r3, [pc, #472]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a75      	ldr	r2, [pc, #468]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0xb0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x98>
 80021fe:	4b70      	ldr	r3, [pc, #448]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6f      	ldr	r2, [pc, #444]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b6d      	ldr	r3, [pc, #436]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6c      	ldr	r2, [pc, #432]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xb0>
 8002218:	4b69      	ldr	r3, [pc, #420]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a68      	ldr	r2, [pc, #416]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b66      	ldr	r3, [pc, #408]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a65      	ldr	r2, [pc, #404]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800222e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff f94a 	bl	80014d0 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff f946 	bl	80014d0 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	@ 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e207      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b5b      	ldr	r3, [pc, #364]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0xc0>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff f936 	bl	80014d0 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff f932 	bl	80014d0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	@ 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1f3      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	4b51      	ldr	r3, [pc, #324]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0xe8>
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002296:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a2:	4b47      	ldr	r3, [pc, #284]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ae:	4b44      	ldr	r3, [pc, #272]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x152>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e1c7      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4937      	ldr	r1, [pc, #220]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e03a      	b.n	800235e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b34      	ldr	r3, [pc, #208]	@ (80023c4 <HAL_RCC_OscConfig+0x244>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7ff f8eb 	bl	80014d0 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fe:	f7ff f8e7 	bl	80014d0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1a8      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4925      	ldr	r1, [pc, #148]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <HAL_RCC_OscConfig+0x244>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7ff f8ca 	bl	80014d0 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002340:	f7ff f8c6 	bl	80014d0 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e187      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d036      	beq.n	80023d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HAL_RCC_OscConfig+0x248>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7ff f8aa 	bl	80014d0 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff f8a6 	bl	80014d0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e167      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x200>
 800239e:	e01b      	b.n	80023d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <HAL_RCC_OscConfig+0x248>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff f893 	bl	80014d0 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	e00e      	b.n	80023cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ae:	f7ff f88f 	bl	80014d0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d907      	bls.n	80023cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e150      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
 80023c0:	40023800 	.word	0x40023800
 80023c4:	42470000 	.word	0x42470000
 80023c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80023ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ea      	bne.n	80023ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8097 	beq.w	8002514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b81      	ldr	r3, [pc, #516]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b7d      	ldr	r3, [pc, #500]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	4a7c      	ldr	r2, [pc, #496]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	@ 0x40
 8002406:	4b7a      	ldr	r3, [pc, #488]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b77      	ldr	r3, [pc, #476]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b74      	ldr	r3, [pc, #464]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a73      	ldr	r2, [pc, #460]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7ff f84f 	bl	80014d0 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7ff f84b 	bl	80014d0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e10c      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x2ea>
 800245c:	4b64      	ldr	r3, [pc, #400]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	4a63      	ldr	r2, [pc, #396]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	@ 0x70
 8002468:	e01c      	b.n	80024a4 <HAL_RCC_OscConfig+0x324>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x30c>
 8002472:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002476:	4a5e      	ldr	r2, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6713      	str	r3, [r2, #112]	@ 0x70
 800247e:	4b5c      	ldr	r3, [pc, #368]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002482:	4a5b      	ldr	r2, [pc, #364]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6713      	str	r3, [r2, #112]	@ 0x70
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0x324>
 800248c:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002490:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6713      	str	r3, [r2, #112]	@ 0x70
 8002498:	4b55      	ldr	r3, [pc, #340]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249c:	4a54      	ldr	r2, [pc, #336]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800249e:	f023 0304 	bic.w	r3, r3, #4
 80024a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7ff f810 	bl	80014d0 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7ff f80c 	bl	80014d0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0cb      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ee      	beq.n	80024b4 <HAL_RCC_OscConfig+0x334>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7fe fffa 	bl	80014d0 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7fe fff6 	bl	80014d0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0b5      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f6:	4b3e      	ldr	r3, [pc, #248]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002508:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	4a38      	ldr	r2, [pc, #224]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800250e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a1 	beq.w	8002660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251e:	4b34      	ldr	r3, [pc, #208]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b08      	cmp	r3, #8
 8002528:	d05c      	beq.n	80025e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d141      	bne.n	80025b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b31      	ldr	r3, [pc, #196]	@ (80025f8 <HAL_RCC_OscConfig+0x478>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe ffca 	bl	80014d0 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe ffc6 	bl	80014d0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e087      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	491b      	ldr	r1, [pc, #108]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x478>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe ff9f 	bl	80014d0 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe ff9b 	bl	80014d0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e05c      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x416>
 80025b4:	e054      	b.n	8002660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_RCC_OscConfig+0x478>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe ff88 	bl	80014d0 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe ff84 	bl	80014d0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e045      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x444>
 80025e2:	e03d      	b.n	8002660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e038      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_RCC_OscConfig+0x4ec>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d028      	beq.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d121      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d11a      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002634:	4293      	cmp	r3, r2
 8002636:	d111      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	3b01      	subs	r3, #1
 8002646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0cc      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b68      	ldr	r3, [pc, #416]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d90c      	bls.n	80026ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b65      	ldr	r3, [pc, #404]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a58      	ldr	r2, [pc, #352]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a52      	ldr	r2, [pc, #328]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d044      	beq.n	8002790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d119      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d003      	beq.n	800272e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272a:	2b03      	cmp	r3, #3
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	4b3f      	ldr	r3, [pc, #252]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e067      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b37      	ldr	r3, [pc, #220]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4934      	ldr	r1, [pc, #208]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002760:	f7fe feb6 	bl	80014d0 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe feb2 	bl	80014d0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e04f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002790:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d20c      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	@ (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fe16 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00
 800282c:	40023800 	.word	0x40023800
 8002830:	08003b2c 	.word	0x08003b2c
 8002834:	20000000 	.word	0x20000000
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002840:	b090      	sub	sp, #64	@ 0x40
 8002842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	637b      	str	r3, [r7, #52]	@ 0x34
 8002848:	2300      	movs	r3, #0
 800284a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800284c:	2300      	movs	r3, #0
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002854:	4b59      	ldr	r3, [pc, #356]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d00d      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x40>
 8002860:	2b08      	cmp	r3, #8
 8002862:	f200 80a1 	bhi.w	80029a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x34>
 800286a:	2b04      	cmp	r3, #4
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x3a>
 800286e:	e09b      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b53      	ldr	r3, [pc, #332]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002872:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002874:	e09b      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002876:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002878:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800287a:	e098      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800287c:	4b4f      	ldr	r3, [pc, #316]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002884:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002886:	4b4d      	ldr	r3, [pc, #308]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d028      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002892:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	2200      	movs	r2, #0
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	627a      	str	r2, [r7, #36]	@ 0x24
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028a4:	2100      	movs	r1, #0
 80028a6:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80028a8:	fb03 f201 	mul.w	r2, r3, r1
 80028ac:	2300      	movs	r3, #0
 80028ae:	fb00 f303 	mul.w	r3, r0, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	4a43      	ldr	r2, [pc, #268]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80028b6:	fba0 1202 	umull	r1, r2, r0, r2
 80028ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028bc:	460a      	mov	r2, r1
 80028be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80028c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028c2:	4413      	add	r3, r2
 80028c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c8:	2200      	movs	r2, #0
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	61fa      	str	r2, [r7, #28]
 80028ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028d6:	f7fe f8f1 	bl	8000abc <__aeabi_uldivmod>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4613      	mov	r3, r2
 80028e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e2:	e053      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e4:	4b35      	ldr	r3, [pc, #212]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	2200      	movs	r2, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	617a      	str	r2, [r7, #20]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028f6:	f04f 0b00 	mov.w	fp, #0
 80028fa:	4652      	mov	r2, sl
 80028fc:	465b      	mov	r3, fp
 80028fe:	f04f 0000 	mov.w	r0, #0
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	0159      	lsls	r1, r3, #5
 8002908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290c:	0150      	lsls	r0, r2, #5
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	ebb2 080a 	subs.w	r8, r2, sl
 8002916:	eb63 090b 	sbc.w	r9, r3, fp
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002926:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800292a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800292e:	ebb2 0408 	subs.w	r4, r2, r8
 8002932:	eb63 0509 	sbc.w	r5, r3, r9
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	00eb      	lsls	r3, r5, #3
 8002940:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002944:	00e2      	lsls	r2, r4, #3
 8002946:	4614      	mov	r4, r2
 8002948:	461d      	mov	r5, r3
 800294a:	eb14 030a 	adds.w	r3, r4, sl
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	eb45 030b 	adc.w	r3, r5, fp
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002962:	4629      	mov	r1, r5
 8002964:	028b      	lsls	r3, r1, #10
 8002966:	4621      	mov	r1, r4
 8002968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800296c:	4621      	mov	r1, r4
 800296e:	028a      	lsls	r2, r1, #10
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002976:	2200      	movs	r2, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	60fa      	str	r2, [r7, #12]
 800297c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002980:	f7fe f89c 	bl	8000abc <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4613      	mov	r3, r2
 800298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	3301      	adds	r3, #1
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800299c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a6:	e002      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80029aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3740      	adds	r7, #64	@ 0x40
 80029b4:	46bd      	mov	sp, r7
 80029b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	017d7840 	.word	0x017d7840

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000

080029e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0a9b      	lsrs	r3, r3, #10
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	@ (8002a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08003b3c 	.word	0x08003b3c

08002a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a0c:	f7ff ffdc 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0b5b      	lsrs	r3, r3, #13
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	@ (8002a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08003b3c 	.word	0x08003b3c

08002a30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e03f      	b.n	8002ac2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fbea 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	@ 0x24
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f929 	bl	8002ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b08a      	sub	sp, #40	@ 0x28
 8002ace:	af02      	add	r7, sp, #8
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d17c      	bne.n	8002be4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_UART_Transmit+0x2c>
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e075      	b.n	8002be6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_UART_Transmit+0x3e>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e06e      	b.n	8002be6 <HAL_UART_Transmit+0x11c>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2221      	movs	r2, #33	@ 0x21
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b1e:	f7fe fcd7 	bl	80014d0 <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b38:	d108      	bne.n	8002b4c <HAL_UART_Transmit+0x82>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d104      	bne.n	8002b4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	e003      	b.n	8002b54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8002b5c:	e02a      	b.n	8002bb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2180      	movs	r1, #128	@ 0x80
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f840 	bl	8002bee <UART_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e036      	b.n	8002be6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	3302      	adds	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	e007      	b.n	8002ba6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1cf      	bne.n	8002b5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2140      	movs	r1, #64	@ 0x40
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f810 	bl	8002bee <UART_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e006      	b.n	8002be6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b090      	sub	sp, #64	@ 0x40
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bfe:	e050      	b.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c06:	d04c      	beq.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c0e:	f7fe fc5f 	bl	80014d0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d241      	bcs.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002c40:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e5      	bne.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3314      	adds	r3, #20
 8002c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	e853 3f00 	ldrex	r3, [r3]
 8002c60:	613b      	str	r3, [r7, #16]
   return(result);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3314      	adds	r3, #20
 8002c70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c72:	623a      	str	r2, [r7, #32]
 8002c74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	69f9      	ldr	r1, [r7, #28]
 8002c78:	6a3a      	ldr	r2, [r7, #32]
 8002c7a:	e841 2300 	strex	r3, r2, [r1]
 8002c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e5      	bne.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e00f      	b.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4013      	ands	r3, r2
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d09f      	beq.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3740      	adds	r7, #64	@ 0x40
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd0:	b0c0      	sub	sp, #256	@ 0x100
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce8:	68d9      	ldr	r1, [r3, #12]
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	ea40 0301 	orr.w	r3, r0, r1
 8002cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d24:	f021 010c 	bic.w	r1, r1, #12
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d32:	430b      	orrs	r3, r1
 8002d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d46:	6999      	ldr	r1, [r3, #24]
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	ea40 0301 	orr.w	r3, r0, r1
 8002d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b8f      	ldr	r3, [pc, #572]	@ (8002f98 <UART_SetConfig+0x2cc>)
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d005      	beq.n	8002d6c <UART_SetConfig+0xa0>
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b8d      	ldr	r3, [pc, #564]	@ (8002f9c <UART_SetConfig+0x2d0>)
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d104      	bne.n	8002d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d6c:	f7ff fe4c 	bl	8002a08 <HAL_RCC_GetPCLK2Freq>
 8002d70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d74:	e003      	b.n	8002d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d76:	f7ff fe33 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8002d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d88:	f040 810c 	bne.w	8002fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d9e:	4622      	mov	r2, r4
 8002da0:	462b      	mov	r3, r5
 8002da2:	1891      	adds	r1, r2, r2
 8002da4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002da6:	415b      	adcs	r3, r3
 8002da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dae:	4621      	mov	r1, r4
 8002db0:	eb12 0801 	adds.w	r8, r2, r1
 8002db4:	4629      	mov	r1, r5
 8002db6:	eb43 0901 	adc.w	r9, r3, r1
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dce:	4690      	mov	r8, r2
 8002dd0:	4699      	mov	r9, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	eb18 0303 	adds.w	r3, r8, r3
 8002dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ddc:	462b      	mov	r3, r5
 8002dde:	eb49 0303 	adc.w	r3, r9, r3
 8002de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002df2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	18db      	adds	r3, r3, r3
 8002dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e00:	4613      	mov	r3, r2
 8002e02:	eb42 0303 	adc.w	r3, r2, r3
 8002e06:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e10:	f7fd fe54 	bl	8000abc <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <UART_SetConfig+0x2d4>)
 8002e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	011c      	lsls	r4, r3, #4
 8002e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e44:	4641      	mov	r1, r8
 8002e46:	eb12 0a01 	adds.w	sl, r2, r1
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e64:	4692      	mov	sl, r2
 8002e66:	469b      	mov	fp, r3
 8002e68:	4643      	mov	r3, r8
 8002e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e72:	464b      	mov	r3, r9
 8002e74:	eb4b 0303 	adc.w	r3, fp, r3
 8002e78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e90:	460b      	mov	r3, r1
 8002e92:	18db      	adds	r3, r3, r3
 8002e94:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e96:	4613      	mov	r3, r2
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ea6:	f7fd fe09 	bl	8000abc <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa0 <UART_SetConfig+0x2d4>)
 8002eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2264      	movs	r2, #100	@ 0x64
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	1acb      	subs	r3, r1, r3
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ec6:	4b36      	ldr	r3, [pc, #216]	@ (8002fa0 <UART_SetConfig+0x2d4>)
 8002ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ed4:	441c      	add	r4, r3
 8002ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ee8:	4642      	mov	r2, r8
 8002eea:	464b      	mov	r3, r9
 8002eec:	1891      	adds	r1, r2, r2
 8002eee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ef0:	415b      	adcs	r3, r3
 8002ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ef8:	4641      	mov	r1, r8
 8002efa:	1851      	adds	r1, r2, r1
 8002efc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002efe:	4649      	mov	r1, r9
 8002f00:	414b      	adcs	r3, r1
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f10:	4659      	mov	r1, fp
 8002f12:	00cb      	lsls	r3, r1, #3
 8002f14:	4651      	mov	r1, sl
 8002f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	00ca      	lsls	r2, r1, #3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	4642      	mov	r2, r8
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f2c:	464b      	mov	r3, r9
 8002f2e:	460a      	mov	r2, r1
 8002f30:	eb42 0303 	adc.w	r3, r2, r3
 8002f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	18db      	adds	r3, r3, r3
 8002f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f52:	4613      	mov	r3, r2
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f62:	f7fd fdab 	bl	8000abc <__aeabi_uldivmod>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <UART_SetConfig+0x2d4>)
 8002f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	2164      	movs	r1, #100	@ 0x64
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	3332      	adds	r3, #50	@ 0x32
 8002f7e:	4a08      	ldr	r2, [pc, #32]	@ (8002fa0 <UART_SetConfig+0x2d4>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	f003 0207 	and.w	r2, r3, #7
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4422      	add	r2, r4
 8002f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f94:	e106      	b.n	80031a4 <UART_SetConfig+0x4d8>
 8002f96:	bf00      	nop
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40011400 	.word	0x40011400
 8002fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002fb6:	4642      	mov	r2, r8
 8002fb8:	464b      	mov	r3, r9
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	6239      	str	r1, [r7, #32]
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	1854      	adds	r4, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb43 0501 	adc.w	r5, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	00eb      	lsls	r3, r5, #3
 8002fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fde:	00e2      	lsls	r2, r4, #3
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	18e3      	adds	r3, r4, r3
 8002fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fec:	464b      	mov	r3, r9
 8002fee:	eb45 0303 	adc.w	r3, r5, r3
 8002ff2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003002:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003012:	4629      	mov	r1, r5
 8003014:	008b      	lsls	r3, r1, #2
 8003016:	4621      	mov	r1, r4
 8003018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301c:	4621      	mov	r1, r4
 800301e:	008a      	lsls	r2, r1, #2
 8003020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003024:	f7fd fd4a 	bl	8000abc <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4b60      	ldr	r3, [pc, #384]	@ (80031b0 <UART_SetConfig+0x4e4>)
 800302e:	fba3 2302 	umull	r2, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	011c      	lsls	r4, r3, #4
 8003036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003040:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	1891      	adds	r1, r2, r2
 800304e:	61b9      	str	r1, [r7, #24]
 8003050:	415b      	adcs	r3, r3
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003058:	4641      	mov	r1, r8
 800305a:	1851      	adds	r1, r2, r1
 800305c:	6139      	str	r1, [r7, #16]
 800305e:	4649      	mov	r1, r9
 8003060:	414b      	adcs	r3, r1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003070:	4659      	mov	r1, fp
 8003072:	00cb      	lsls	r3, r1, #3
 8003074:	4651      	mov	r1, sl
 8003076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307a:	4651      	mov	r1, sl
 800307c:	00ca      	lsls	r2, r1, #3
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	4603      	mov	r3, r0
 8003084:	4642      	mov	r2, r8
 8003086:	189b      	adds	r3, r3, r2
 8003088:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800308c:	464b      	mov	r3, r9
 800308e:	460a      	mov	r2, r1
 8003090:	eb42 0303 	adc.w	r3, r2, r3
 8003094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80030b0:	4649      	mov	r1, r9
 80030b2:	008b      	lsls	r3, r1, #2
 80030b4:	4641      	mov	r1, r8
 80030b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ba:	4641      	mov	r1, r8
 80030bc:	008a      	lsls	r2, r1, #2
 80030be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030c2:	f7fd fcfb 	bl	8000abc <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <UART_SetConfig+0x4e4>)
 80030ce:	fba3 2301 	umull	r2, r3, r3, r1
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2264      	movs	r2, #100	@ 0x64
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	1acb      	subs	r3, r1, r3
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	3332      	adds	r3, #50	@ 0x32
 80030e0:	4a33      	ldr	r2, [pc, #204]	@ (80031b0 <UART_SetConfig+0x4e4>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ec:	441c      	add	r4, r3
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80030f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80030f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	1891      	adds	r1, r2, r2
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	415b      	adcs	r3, r3
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800310c:	4641      	mov	r1, r8
 800310e:	1851      	adds	r1, r2, r1
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	4649      	mov	r1, r9
 8003114:	414b      	adcs	r3, r1
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003124:	4659      	mov	r1, fp
 8003126:	00cb      	lsls	r3, r1, #3
 8003128:	4651      	mov	r1, sl
 800312a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312e:	4651      	mov	r1, sl
 8003130:	00ca      	lsls	r2, r1, #3
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	4603      	mov	r3, r0
 8003138:	4642      	mov	r2, r8
 800313a:	189b      	adds	r3, r3, r2
 800313c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800313e:	464b      	mov	r3, r9
 8003140:	460a      	mov	r2, r1
 8003142:	eb42 0303 	adc.w	r3, r2, r3
 8003146:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	663b      	str	r3, [r7, #96]	@ 0x60
 8003152:	667a      	str	r2, [r7, #100]	@ 0x64
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003160:	4649      	mov	r1, r9
 8003162:	008b      	lsls	r3, r1, #2
 8003164:	4641      	mov	r1, r8
 8003166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800316a:	4641      	mov	r1, r8
 800316c:	008a      	lsls	r2, r1, #2
 800316e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003172:	f7fd fca3 	bl	8000abc <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <UART_SetConfig+0x4e4>)
 800317c:	fba3 1302 	umull	r1, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	2164      	movs	r1, #100	@ 0x64
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	3332      	adds	r3, #50	@ 0x32
 800318e:	4a08      	ldr	r2, [pc, #32]	@ (80031b0 <UART_SetConfig+0x4e4>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	f003 020f 	and.w	r2, r3, #15
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4422      	add	r2, r4
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	bf00      	nop
 80031a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80031aa:	46bd      	mov	sp, r7
 80031ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b0:	51eb851f 	.word	0x51eb851f

080031b4 <siprintf>:
 80031b4:	b40e      	push	{r1, r2, r3}
 80031b6:	b500      	push	{lr}
 80031b8:	b09c      	sub	sp, #112	@ 0x70
 80031ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80031bc:	9002      	str	r0, [sp, #8]
 80031be:	9006      	str	r0, [sp, #24]
 80031c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80031c4:	4809      	ldr	r0, [pc, #36]	@ (80031ec <siprintf+0x38>)
 80031c6:	9107      	str	r1, [sp, #28]
 80031c8:	9104      	str	r1, [sp, #16]
 80031ca:	4909      	ldr	r1, [pc, #36]	@ (80031f0 <siprintf+0x3c>)
 80031cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80031d0:	9105      	str	r1, [sp, #20]
 80031d2:	6800      	ldr	r0, [r0, #0]
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	a902      	add	r1, sp, #8
 80031d8:	f000 f89c 	bl	8003314 <_svfiprintf_r>
 80031dc:	9b02      	ldr	r3, [sp, #8]
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	b01c      	add	sp, #112	@ 0x70
 80031e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031e8:	b003      	add	sp, #12
 80031ea:	4770      	bx	lr
 80031ec:	2000000c 	.word	0x2000000c
 80031f0:	ffff0208 	.word	0xffff0208

080031f4 <memset>:
 80031f4:	4402      	add	r2, r0
 80031f6:	4603      	mov	r3, r0
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d100      	bne.n	80031fe <memset+0xa>
 80031fc:	4770      	bx	lr
 80031fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003202:	e7f9      	b.n	80031f8 <memset+0x4>

08003204 <__errno>:
 8003204:	4b01      	ldr	r3, [pc, #4]	@ (800320c <__errno+0x8>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	2000000c 	.word	0x2000000c

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	4d0d      	ldr	r5, [pc, #52]	@ (8003248 <__libc_init_array+0x38>)
 8003214:	4c0d      	ldr	r4, [pc, #52]	@ (800324c <__libc_init_array+0x3c>)
 8003216:	1b64      	subs	r4, r4, r5
 8003218:	10a4      	asrs	r4, r4, #2
 800321a:	2600      	movs	r6, #0
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	4d0b      	ldr	r5, [pc, #44]	@ (8003250 <__libc_init_array+0x40>)
 8003222:	4c0c      	ldr	r4, [pc, #48]	@ (8003254 <__libc_init_array+0x44>)
 8003224:	f000 fc66 	bl	8003af4 <_init>
 8003228:	1b64      	subs	r4, r4, r5
 800322a:	10a4      	asrs	r4, r4, #2
 800322c:	2600      	movs	r6, #0
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	f855 3b04 	ldr.w	r3, [r5], #4
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	08003b80 	.word	0x08003b80
 800324c:	08003b80 	.word	0x08003b80
 8003250:	08003b80 	.word	0x08003b80
 8003254:	08003b84 	.word	0x08003b84

08003258 <__retarget_lock_acquire_recursive>:
 8003258:	4770      	bx	lr

0800325a <__retarget_lock_release_recursive>:
 800325a:	4770      	bx	lr

0800325c <__ssputs_r>:
 800325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	688e      	ldr	r6, [r1, #8]
 8003262:	461f      	mov	r7, r3
 8003264:	42be      	cmp	r6, r7
 8003266:	680b      	ldr	r3, [r1, #0]
 8003268:	4682      	mov	sl, r0
 800326a:	460c      	mov	r4, r1
 800326c:	4690      	mov	r8, r2
 800326e:	d82d      	bhi.n	80032cc <__ssputs_r+0x70>
 8003270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003278:	d026      	beq.n	80032c8 <__ssputs_r+0x6c>
 800327a:	6965      	ldr	r5, [r4, #20]
 800327c:	6909      	ldr	r1, [r1, #16]
 800327e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003282:	eba3 0901 	sub.w	r9, r3, r1
 8003286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800328a:	1c7b      	adds	r3, r7, #1
 800328c:	444b      	add	r3, r9
 800328e:	106d      	asrs	r5, r5, #1
 8003290:	429d      	cmp	r5, r3
 8003292:	bf38      	it	cc
 8003294:	461d      	movcc	r5, r3
 8003296:	0553      	lsls	r3, r2, #21
 8003298:	d527      	bpl.n	80032ea <__ssputs_r+0x8e>
 800329a:	4629      	mov	r1, r5
 800329c:	f000 f958 	bl	8003550 <_malloc_r>
 80032a0:	4606      	mov	r6, r0
 80032a2:	b360      	cbz	r0, 80032fe <__ssputs_r+0xa2>
 80032a4:	6921      	ldr	r1, [r4, #16]
 80032a6:	464a      	mov	r2, r9
 80032a8:	f000 fbc4 	bl	8003a34 <memcpy>
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	6126      	str	r6, [r4, #16]
 80032ba:	6165      	str	r5, [r4, #20]
 80032bc:	444e      	add	r6, r9
 80032be:	eba5 0509 	sub.w	r5, r5, r9
 80032c2:	6026      	str	r6, [r4, #0]
 80032c4:	60a5      	str	r5, [r4, #8]
 80032c6:	463e      	mov	r6, r7
 80032c8:	42be      	cmp	r6, r7
 80032ca:	d900      	bls.n	80032ce <__ssputs_r+0x72>
 80032cc:	463e      	mov	r6, r7
 80032ce:	6820      	ldr	r0, [r4, #0]
 80032d0:	4632      	mov	r2, r6
 80032d2:	4641      	mov	r1, r8
 80032d4:	f000 fb84 	bl	80039e0 <memmove>
 80032d8:	68a3      	ldr	r3, [r4, #8]
 80032da:	1b9b      	subs	r3, r3, r6
 80032dc:	60a3      	str	r3, [r4, #8]
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	4433      	add	r3, r6
 80032e2:	6023      	str	r3, [r4, #0]
 80032e4:	2000      	movs	r0, #0
 80032e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ea:	462a      	mov	r2, r5
 80032ec:	f000 fb4a 	bl	8003984 <_realloc_r>
 80032f0:	4606      	mov	r6, r0
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d1e0      	bne.n	80032b8 <__ssputs_r+0x5c>
 80032f6:	6921      	ldr	r1, [r4, #16]
 80032f8:	4650      	mov	r0, sl
 80032fa:	f000 fba9 	bl	8003a50 <_free_r>
 80032fe:	230c      	movs	r3, #12
 8003300:	f8ca 3000 	str.w	r3, [sl]
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800330a:	81a3      	strh	r3, [r4, #12]
 800330c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003310:	e7e9      	b.n	80032e6 <__ssputs_r+0x8a>
	...

08003314 <_svfiprintf_r>:
 8003314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003318:	4698      	mov	r8, r3
 800331a:	898b      	ldrh	r3, [r1, #12]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	b09d      	sub	sp, #116	@ 0x74
 8003320:	4607      	mov	r7, r0
 8003322:	460d      	mov	r5, r1
 8003324:	4614      	mov	r4, r2
 8003326:	d510      	bpl.n	800334a <_svfiprintf_r+0x36>
 8003328:	690b      	ldr	r3, [r1, #16]
 800332a:	b973      	cbnz	r3, 800334a <_svfiprintf_r+0x36>
 800332c:	2140      	movs	r1, #64	@ 0x40
 800332e:	f000 f90f 	bl	8003550 <_malloc_r>
 8003332:	6028      	str	r0, [r5, #0]
 8003334:	6128      	str	r0, [r5, #16]
 8003336:	b930      	cbnz	r0, 8003346 <_svfiprintf_r+0x32>
 8003338:	230c      	movs	r3, #12
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003340:	b01d      	add	sp, #116	@ 0x74
 8003342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003346:	2340      	movs	r3, #64	@ 0x40
 8003348:	616b      	str	r3, [r5, #20]
 800334a:	2300      	movs	r3, #0
 800334c:	9309      	str	r3, [sp, #36]	@ 0x24
 800334e:	2320      	movs	r3, #32
 8003350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003354:	f8cd 800c 	str.w	r8, [sp, #12]
 8003358:	2330      	movs	r3, #48	@ 0x30
 800335a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80034f8 <_svfiprintf_r+0x1e4>
 800335e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003362:	f04f 0901 	mov.w	r9, #1
 8003366:	4623      	mov	r3, r4
 8003368:	469a      	mov	sl, r3
 800336a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800336e:	b10a      	cbz	r2, 8003374 <_svfiprintf_r+0x60>
 8003370:	2a25      	cmp	r2, #37	@ 0x25
 8003372:	d1f9      	bne.n	8003368 <_svfiprintf_r+0x54>
 8003374:	ebba 0b04 	subs.w	fp, sl, r4
 8003378:	d00b      	beq.n	8003392 <_svfiprintf_r+0x7e>
 800337a:	465b      	mov	r3, fp
 800337c:	4622      	mov	r2, r4
 800337e:	4629      	mov	r1, r5
 8003380:	4638      	mov	r0, r7
 8003382:	f7ff ff6b 	bl	800325c <__ssputs_r>
 8003386:	3001      	adds	r0, #1
 8003388:	f000 80a7 	beq.w	80034da <_svfiprintf_r+0x1c6>
 800338c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800338e:	445a      	add	r2, fp
 8003390:	9209      	str	r2, [sp, #36]	@ 0x24
 8003392:	f89a 3000 	ldrb.w	r3, [sl]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 809f 	beq.w	80034da <_svfiprintf_r+0x1c6>
 800339c:	2300      	movs	r3, #0
 800339e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033a6:	f10a 0a01 	add.w	sl, sl, #1
 80033aa:	9304      	str	r3, [sp, #16]
 80033ac:	9307      	str	r3, [sp, #28]
 80033ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80033b4:	4654      	mov	r4, sl
 80033b6:	2205      	movs	r2, #5
 80033b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033bc:	484e      	ldr	r0, [pc, #312]	@ (80034f8 <_svfiprintf_r+0x1e4>)
 80033be:	f7fc ff0f 	bl	80001e0 <memchr>
 80033c2:	9a04      	ldr	r2, [sp, #16]
 80033c4:	b9d8      	cbnz	r0, 80033fe <_svfiprintf_r+0xea>
 80033c6:	06d0      	lsls	r0, r2, #27
 80033c8:	bf44      	itt	mi
 80033ca:	2320      	movmi	r3, #32
 80033cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033d0:	0711      	lsls	r1, r2, #28
 80033d2:	bf44      	itt	mi
 80033d4:	232b      	movmi	r3, #43	@ 0x2b
 80033d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033da:	f89a 3000 	ldrb.w	r3, [sl]
 80033de:	2b2a      	cmp	r3, #42	@ 0x2a
 80033e0:	d015      	beq.n	800340e <_svfiprintf_r+0xfa>
 80033e2:	9a07      	ldr	r2, [sp, #28]
 80033e4:	4654      	mov	r4, sl
 80033e6:	2000      	movs	r0, #0
 80033e8:	f04f 0c0a 	mov.w	ip, #10
 80033ec:	4621      	mov	r1, r4
 80033ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033f2:	3b30      	subs	r3, #48	@ 0x30
 80033f4:	2b09      	cmp	r3, #9
 80033f6:	d94b      	bls.n	8003490 <_svfiprintf_r+0x17c>
 80033f8:	b1b0      	cbz	r0, 8003428 <_svfiprintf_r+0x114>
 80033fa:	9207      	str	r2, [sp, #28]
 80033fc:	e014      	b.n	8003428 <_svfiprintf_r+0x114>
 80033fe:	eba0 0308 	sub.w	r3, r0, r8
 8003402:	fa09 f303 	lsl.w	r3, r9, r3
 8003406:	4313      	orrs	r3, r2
 8003408:	9304      	str	r3, [sp, #16]
 800340a:	46a2      	mov	sl, r4
 800340c:	e7d2      	b.n	80033b4 <_svfiprintf_r+0xa0>
 800340e:	9b03      	ldr	r3, [sp, #12]
 8003410:	1d19      	adds	r1, r3, #4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	9103      	str	r1, [sp, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	bfbb      	ittet	lt
 800341a:	425b      	neglt	r3, r3
 800341c:	f042 0202 	orrlt.w	r2, r2, #2
 8003420:	9307      	strge	r3, [sp, #28]
 8003422:	9307      	strlt	r3, [sp, #28]
 8003424:	bfb8      	it	lt
 8003426:	9204      	strlt	r2, [sp, #16]
 8003428:	7823      	ldrb	r3, [r4, #0]
 800342a:	2b2e      	cmp	r3, #46	@ 0x2e
 800342c:	d10a      	bne.n	8003444 <_svfiprintf_r+0x130>
 800342e:	7863      	ldrb	r3, [r4, #1]
 8003430:	2b2a      	cmp	r3, #42	@ 0x2a
 8003432:	d132      	bne.n	800349a <_svfiprintf_r+0x186>
 8003434:	9b03      	ldr	r3, [sp, #12]
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	9203      	str	r2, [sp, #12]
 800343c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003440:	3402      	adds	r4, #2
 8003442:	9305      	str	r3, [sp, #20]
 8003444:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003508 <_svfiprintf_r+0x1f4>
 8003448:	7821      	ldrb	r1, [r4, #0]
 800344a:	2203      	movs	r2, #3
 800344c:	4650      	mov	r0, sl
 800344e:	f7fc fec7 	bl	80001e0 <memchr>
 8003452:	b138      	cbz	r0, 8003464 <_svfiprintf_r+0x150>
 8003454:	9b04      	ldr	r3, [sp, #16]
 8003456:	eba0 000a 	sub.w	r0, r0, sl
 800345a:	2240      	movs	r2, #64	@ 0x40
 800345c:	4082      	lsls	r2, r0
 800345e:	4313      	orrs	r3, r2
 8003460:	3401      	adds	r4, #1
 8003462:	9304      	str	r3, [sp, #16]
 8003464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003468:	4824      	ldr	r0, [pc, #144]	@ (80034fc <_svfiprintf_r+0x1e8>)
 800346a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800346e:	2206      	movs	r2, #6
 8003470:	f7fc feb6 	bl	80001e0 <memchr>
 8003474:	2800      	cmp	r0, #0
 8003476:	d036      	beq.n	80034e6 <_svfiprintf_r+0x1d2>
 8003478:	4b21      	ldr	r3, [pc, #132]	@ (8003500 <_svfiprintf_r+0x1ec>)
 800347a:	bb1b      	cbnz	r3, 80034c4 <_svfiprintf_r+0x1b0>
 800347c:	9b03      	ldr	r3, [sp, #12]
 800347e:	3307      	adds	r3, #7
 8003480:	f023 0307 	bic.w	r3, r3, #7
 8003484:	3308      	adds	r3, #8
 8003486:	9303      	str	r3, [sp, #12]
 8003488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800348a:	4433      	add	r3, r6
 800348c:	9309      	str	r3, [sp, #36]	@ 0x24
 800348e:	e76a      	b.n	8003366 <_svfiprintf_r+0x52>
 8003490:	fb0c 3202 	mla	r2, ip, r2, r3
 8003494:	460c      	mov	r4, r1
 8003496:	2001      	movs	r0, #1
 8003498:	e7a8      	b.n	80033ec <_svfiprintf_r+0xd8>
 800349a:	2300      	movs	r3, #0
 800349c:	3401      	adds	r4, #1
 800349e:	9305      	str	r3, [sp, #20]
 80034a0:	4619      	mov	r1, r3
 80034a2:	f04f 0c0a 	mov.w	ip, #10
 80034a6:	4620      	mov	r0, r4
 80034a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ac:	3a30      	subs	r2, #48	@ 0x30
 80034ae:	2a09      	cmp	r2, #9
 80034b0:	d903      	bls.n	80034ba <_svfiprintf_r+0x1a6>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0c6      	beq.n	8003444 <_svfiprintf_r+0x130>
 80034b6:	9105      	str	r1, [sp, #20]
 80034b8:	e7c4      	b.n	8003444 <_svfiprintf_r+0x130>
 80034ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80034be:	4604      	mov	r4, r0
 80034c0:	2301      	movs	r3, #1
 80034c2:	e7f0      	b.n	80034a6 <_svfiprintf_r+0x192>
 80034c4:	ab03      	add	r3, sp, #12
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	462a      	mov	r2, r5
 80034ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <_svfiprintf_r+0x1f0>)
 80034cc:	a904      	add	r1, sp, #16
 80034ce:	4638      	mov	r0, r7
 80034d0:	f3af 8000 	nop.w
 80034d4:	1c42      	adds	r2, r0, #1
 80034d6:	4606      	mov	r6, r0
 80034d8:	d1d6      	bne.n	8003488 <_svfiprintf_r+0x174>
 80034da:	89ab      	ldrh	r3, [r5, #12]
 80034dc:	065b      	lsls	r3, r3, #25
 80034de:	f53f af2d 	bmi.w	800333c <_svfiprintf_r+0x28>
 80034e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034e4:	e72c      	b.n	8003340 <_svfiprintf_r+0x2c>
 80034e6:	ab03      	add	r3, sp, #12
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	462a      	mov	r2, r5
 80034ec:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <_svfiprintf_r+0x1f0>)
 80034ee:	a904      	add	r1, sp, #16
 80034f0:	4638      	mov	r0, r7
 80034f2:	f000 f91b 	bl	800372c <_printf_i>
 80034f6:	e7ed      	b.n	80034d4 <_svfiprintf_r+0x1c0>
 80034f8:	08003b44 	.word	0x08003b44
 80034fc:	08003b4e 	.word	0x08003b4e
 8003500:	00000000 	.word	0x00000000
 8003504:	0800325d 	.word	0x0800325d
 8003508:	08003b4a 	.word	0x08003b4a

0800350c <sbrk_aligned>:
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	4e0f      	ldr	r6, [pc, #60]	@ (800354c <sbrk_aligned+0x40>)
 8003510:	460c      	mov	r4, r1
 8003512:	6831      	ldr	r1, [r6, #0]
 8003514:	4605      	mov	r5, r0
 8003516:	b911      	cbnz	r1, 800351e <sbrk_aligned+0x12>
 8003518:	f000 fa7c 	bl	8003a14 <_sbrk_r>
 800351c:	6030      	str	r0, [r6, #0]
 800351e:	4621      	mov	r1, r4
 8003520:	4628      	mov	r0, r5
 8003522:	f000 fa77 	bl	8003a14 <_sbrk_r>
 8003526:	1c43      	adds	r3, r0, #1
 8003528:	d103      	bne.n	8003532 <sbrk_aligned+0x26>
 800352a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800352e:	4620      	mov	r0, r4
 8003530:	bd70      	pop	{r4, r5, r6, pc}
 8003532:	1cc4      	adds	r4, r0, #3
 8003534:	f024 0403 	bic.w	r4, r4, #3
 8003538:	42a0      	cmp	r0, r4
 800353a:	d0f8      	beq.n	800352e <sbrk_aligned+0x22>
 800353c:	1a21      	subs	r1, r4, r0
 800353e:	4628      	mov	r0, r5
 8003540:	f000 fa68 	bl	8003a14 <_sbrk_r>
 8003544:	3001      	adds	r0, #1
 8003546:	d1f2      	bne.n	800352e <sbrk_aligned+0x22>
 8003548:	e7ef      	b.n	800352a <sbrk_aligned+0x1e>
 800354a:	bf00      	nop
 800354c:	20000254 	.word	0x20000254

08003550 <_malloc_r>:
 8003550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003554:	1ccd      	adds	r5, r1, #3
 8003556:	f025 0503 	bic.w	r5, r5, #3
 800355a:	3508      	adds	r5, #8
 800355c:	2d0c      	cmp	r5, #12
 800355e:	bf38      	it	cc
 8003560:	250c      	movcc	r5, #12
 8003562:	2d00      	cmp	r5, #0
 8003564:	4606      	mov	r6, r0
 8003566:	db01      	blt.n	800356c <_malloc_r+0x1c>
 8003568:	42a9      	cmp	r1, r5
 800356a:	d904      	bls.n	8003576 <_malloc_r+0x26>
 800356c:	230c      	movs	r3, #12
 800356e:	6033      	str	r3, [r6, #0]
 8003570:	2000      	movs	r0, #0
 8003572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800364c <_malloc_r+0xfc>
 800357a:	f000 f9f7 	bl	800396c <__malloc_lock>
 800357e:	f8d8 3000 	ldr.w	r3, [r8]
 8003582:	461c      	mov	r4, r3
 8003584:	bb44      	cbnz	r4, 80035d8 <_malloc_r+0x88>
 8003586:	4629      	mov	r1, r5
 8003588:	4630      	mov	r0, r6
 800358a:	f7ff ffbf 	bl	800350c <sbrk_aligned>
 800358e:	1c43      	adds	r3, r0, #1
 8003590:	4604      	mov	r4, r0
 8003592:	d158      	bne.n	8003646 <_malloc_r+0xf6>
 8003594:	f8d8 4000 	ldr.w	r4, [r8]
 8003598:	4627      	mov	r7, r4
 800359a:	2f00      	cmp	r7, #0
 800359c:	d143      	bne.n	8003626 <_malloc_r+0xd6>
 800359e:	2c00      	cmp	r4, #0
 80035a0:	d04b      	beq.n	800363a <_malloc_r+0xea>
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	4639      	mov	r1, r7
 80035a6:	4630      	mov	r0, r6
 80035a8:	eb04 0903 	add.w	r9, r4, r3
 80035ac:	f000 fa32 	bl	8003a14 <_sbrk_r>
 80035b0:	4581      	cmp	r9, r0
 80035b2:	d142      	bne.n	800363a <_malloc_r+0xea>
 80035b4:	6821      	ldr	r1, [r4, #0]
 80035b6:	1a6d      	subs	r5, r5, r1
 80035b8:	4629      	mov	r1, r5
 80035ba:	4630      	mov	r0, r6
 80035bc:	f7ff ffa6 	bl	800350c <sbrk_aligned>
 80035c0:	3001      	adds	r0, #1
 80035c2:	d03a      	beq.n	800363a <_malloc_r+0xea>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	442b      	add	r3, r5
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	f8d8 3000 	ldr.w	r3, [r8]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	bb62      	cbnz	r2, 800362c <_malloc_r+0xdc>
 80035d2:	f8c8 7000 	str.w	r7, [r8]
 80035d6:	e00f      	b.n	80035f8 <_malloc_r+0xa8>
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	1b52      	subs	r2, r2, r5
 80035dc:	d420      	bmi.n	8003620 <_malloc_r+0xd0>
 80035de:	2a0b      	cmp	r2, #11
 80035e0:	d917      	bls.n	8003612 <_malloc_r+0xc2>
 80035e2:	1961      	adds	r1, r4, r5
 80035e4:	42a3      	cmp	r3, r4
 80035e6:	6025      	str	r5, [r4, #0]
 80035e8:	bf18      	it	ne
 80035ea:	6059      	strne	r1, [r3, #4]
 80035ec:	6863      	ldr	r3, [r4, #4]
 80035ee:	bf08      	it	eq
 80035f0:	f8c8 1000 	streq.w	r1, [r8]
 80035f4:	5162      	str	r2, [r4, r5]
 80035f6:	604b      	str	r3, [r1, #4]
 80035f8:	4630      	mov	r0, r6
 80035fa:	f000 f9bd 	bl	8003978 <__malloc_unlock>
 80035fe:	f104 000b 	add.w	r0, r4, #11
 8003602:	1d23      	adds	r3, r4, #4
 8003604:	f020 0007 	bic.w	r0, r0, #7
 8003608:	1ac2      	subs	r2, r0, r3
 800360a:	bf1c      	itt	ne
 800360c:	1a1b      	subne	r3, r3, r0
 800360e:	50a3      	strne	r3, [r4, r2]
 8003610:	e7af      	b.n	8003572 <_malloc_r+0x22>
 8003612:	6862      	ldr	r2, [r4, #4]
 8003614:	42a3      	cmp	r3, r4
 8003616:	bf0c      	ite	eq
 8003618:	f8c8 2000 	streq.w	r2, [r8]
 800361c:	605a      	strne	r2, [r3, #4]
 800361e:	e7eb      	b.n	80035f8 <_malloc_r+0xa8>
 8003620:	4623      	mov	r3, r4
 8003622:	6864      	ldr	r4, [r4, #4]
 8003624:	e7ae      	b.n	8003584 <_malloc_r+0x34>
 8003626:	463c      	mov	r4, r7
 8003628:	687f      	ldr	r7, [r7, #4]
 800362a:	e7b6      	b.n	800359a <_malloc_r+0x4a>
 800362c:	461a      	mov	r2, r3
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	42a3      	cmp	r3, r4
 8003632:	d1fb      	bne.n	800362c <_malloc_r+0xdc>
 8003634:	2300      	movs	r3, #0
 8003636:	6053      	str	r3, [r2, #4]
 8003638:	e7de      	b.n	80035f8 <_malloc_r+0xa8>
 800363a:	230c      	movs	r3, #12
 800363c:	6033      	str	r3, [r6, #0]
 800363e:	4630      	mov	r0, r6
 8003640:	f000 f99a 	bl	8003978 <__malloc_unlock>
 8003644:	e794      	b.n	8003570 <_malloc_r+0x20>
 8003646:	6005      	str	r5, [r0, #0]
 8003648:	e7d6      	b.n	80035f8 <_malloc_r+0xa8>
 800364a:	bf00      	nop
 800364c:	20000258 	.word	0x20000258

08003650 <_printf_common>:
 8003650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003654:	4616      	mov	r6, r2
 8003656:	4698      	mov	r8, r3
 8003658:	688a      	ldr	r2, [r1, #8]
 800365a:	690b      	ldr	r3, [r1, #16]
 800365c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003660:	4293      	cmp	r3, r2
 8003662:	bfb8      	it	lt
 8003664:	4613      	movlt	r3, r2
 8003666:	6033      	str	r3, [r6, #0]
 8003668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800366c:	4607      	mov	r7, r0
 800366e:	460c      	mov	r4, r1
 8003670:	b10a      	cbz	r2, 8003676 <_printf_common+0x26>
 8003672:	3301      	adds	r3, #1
 8003674:	6033      	str	r3, [r6, #0]
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	0699      	lsls	r1, r3, #26
 800367a:	bf42      	ittt	mi
 800367c:	6833      	ldrmi	r3, [r6, #0]
 800367e:	3302      	addmi	r3, #2
 8003680:	6033      	strmi	r3, [r6, #0]
 8003682:	6825      	ldr	r5, [r4, #0]
 8003684:	f015 0506 	ands.w	r5, r5, #6
 8003688:	d106      	bne.n	8003698 <_printf_common+0x48>
 800368a:	f104 0a19 	add.w	sl, r4, #25
 800368e:	68e3      	ldr	r3, [r4, #12]
 8003690:	6832      	ldr	r2, [r6, #0]
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	42ab      	cmp	r3, r5
 8003696:	dc26      	bgt.n	80036e6 <_printf_common+0x96>
 8003698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800369c:	6822      	ldr	r2, [r4, #0]
 800369e:	3b00      	subs	r3, #0
 80036a0:	bf18      	it	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	0692      	lsls	r2, r2, #26
 80036a6:	d42b      	bmi.n	8003700 <_printf_common+0xb0>
 80036a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036ac:	4641      	mov	r1, r8
 80036ae:	4638      	mov	r0, r7
 80036b0:	47c8      	blx	r9
 80036b2:	3001      	adds	r0, #1
 80036b4:	d01e      	beq.n	80036f4 <_printf_common+0xa4>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	6922      	ldr	r2, [r4, #16]
 80036ba:	f003 0306 	and.w	r3, r3, #6
 80036be:	2b04      	cmp	r3, #4
 80036c0:	bf02      	ittt	eq
 80036c2:	68e5      	ldreq	r5, [r4, #12]
 80036c4:	6833      	ldreq	r3, [r6, #0]
 80036c6:	1aed      	subeq	r5, r5, r3
 80036c8:	68a3      	ldr	r3, [r4, #8]
 80036ca:	bf0c      	ite	eq
 80036cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d0:	2500      	movne	r5, #0
 80036d2:	4293      	cmp	r3, r2
 80036d4:	bfc4      	itt	gt
 80036d6:	1a9b      	subgt	r3, r3, r2
 80036d8:	18ed      	addgt	r5, r5, r3
 80036da:	2600      	movs	r6, #0
 80036dc:	341a      	adds	r4, #26
 80036de:	42b5      	cmp	r5, r6
 80036e0:	d11a      	bne.n	8003718 <_printf_common+0xc8>
 80036e2:	2000      	movs	r0, #0
 80036e4:	e008      	b.n	80036f8 <_printf_common+0xa8>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4652      	mov	r2, sl
 80036ea:	4641      	mov	r1, r8
 80036ec:	4638      	mov	r0, r7
 80036ee:	47c8      	blx	r9
 80036f0:	3001      	adds	r0, #1
 80036f2:	d103      	bne.n	80036fc <_printf_common+0xac>
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fc:	3501      	adds	r5, #1
 80036fe:	e7c6      	b.n	800368e <_printf_common+0x3e>
 8003700:	18e1      	adds	r1, r4, r3
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	2030      	movs	r0, #48	@ 0x30
 8003706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800370a:	4422      	add	r2, r4
 800370c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003714:	3302      	adds	r3, #2
 8003716:	e7c7      	b.n	80036a8 <_printf_common+0x58>
 8003718:	2301      	movs	r3, #1
 800371a:	4622      	mov	r2, r4
 800371c:	4641      	mov	r1, r8
 800371e:	4638      	mov	r0, r7
 8003720:	47c8      	blx	r9
 8003722:	3001      	adds	r0, #1
 8003724:	d0e6      	beq.n	80036f4 <_printf_common+0xa4>
 8003726:	3601      	adds	r6, #1
 8003728:	e7d9      	b.n	80036de <_printf_common+0x8e>
	...

0800372c <_printf_i>:
 800372c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	7e0f      	ldrb	r7, [r1, #24]
 8003732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003734:	2f78      	cmp	r7, #120	@ 0x78
 8003736:	4691      	mov	r9, r2
 8003738:	4680      	mov	r8, r0
 800373a:	460c      	mov	r4, r1
 800373c:	469a      	mov	sl, r3
 800373e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003742:	d807      	bhi.n	8003754 <_printf_i+0x28>
 8003744:	2f62      	cmp	r7, #98	@ 0x62
 8003746:	d80a      	bhi.n	800375e <_printf_i+0x32>
 8003748:	2f00      	cmp	r7, #0
 800374a:	f000 80d2 	beq.w	80038f2 <_printf_i+0x1c6>
 800374e:	2f58      	cmp	r7, #88	@ 0x58
 8003750:	f000 80b9 	beq.w	80038c6 <_printf_i+0x19a>
 8003754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800375c:	e03a      	b.n	80037d4 <_printf_i+0xa8>
 800375e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003762:	2b15      	cmp	r3, #21
 8003764:	d8f6      	bhi.n	8003754 <_printf_i+0x28>
 8003766:	a101      	add	r1, pc, #4	@ (adr r1, 800376c <_printf_i+0x40>)
 8003768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800376c:	080037c5 	.word	0x080037c5
 8003770:	080037d9 	.word	0x080037d9
 8003774:	08003755 	.word	0x08003755
 8003778:	08003755 	.word	0x08003755
 800377c:	08003755 	.word	0x08003755
 8003780:	08003755 	.word	0x08003755
 8003784:	080037d9 	.word	0x080037d9
 8003788:	08003755 	.word	0x08003755
 800378c:	08003755 	.word	0x08003755
 8003790:	08003755 	.word	0x08003755
 8003794:	08003755 	.word	0x08003755
 8003798:	080038d9 	.word	0x080038d9
 800379c:	08003803 	.word	0x08003803
 80037a0:	08003893 	.word	0x08003893
 80037a4:	08003755 	.word	0x08003755
 80037a8:	08003755 	.word	0x08003755
 80037ac:	080038fb 	.word	0x080038fb
 80037b0:	08003755 	.word	0x08003755
 80037b4:	08003803 	.word	0x08003803
 80037b8:	08003755 	.word	0x08003755
 80037bc:	08003755 	.word	0x08003755
 80037c0:	0800389b 	.word	0x0800389b
 80037c4:	6833      	ldr	r3, [r6, #0]
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6032      	str	r2, [r6, #0]
 80037cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037d4:	2301      	movs	r3, #1
 80037d6:	e09d      	b.n	8003914 <_printf_i+0x1e8>
 80037d8:	6833      	ldr	r3, [r6, #0]
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	1d19      	adds	r1, r3, #4
 80037de:	6031      	str	r1, [r6, #0]
 80037e0:	0606      	lsls	r6, r0, #24
 80037e2:	d501      	bpl.n	80037e8 <_printf_i+0xbc>
 80037e4:	681d      	ldr	r5, [r3, #0]
 80037e6:	e003      	b.n	80037f0 <_printf_i+0xc4>
 80037e8:	0645      	lsls	r5, r0, #25
 80037ea:	d5fb      	bpl.n	80037e4 <_printf_i+0xb8>
 80037ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	da03      	bge.n	80037fc <_printf_i+0xd0>
 80037f4:	232d      	movs	r3, #45	@ 0x2d
 80037f6:	426d      	negs	r5, r5
 80037f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037fc:	4859      	ldr	r0, [pc, #356]	@ (8003964 <_printf_i+0x238>)
 80037fe:	230a      	movs	r3, #10
 8003800:	e011      	b.n	8003826 <_printf_i+0xfa>
 8003802:	6821      	ldr	r1, [r4, #0]
 8003804:	6833      	ldr	r3, [r6, #0]
 8003806:	0608      	lsls	r0, r1, #24
 8003808:	f853 5b04 	ldr.w	r5, [r3], #4
 800380c:	d402      	bmi.n	8003814 <_printf_i+0xe8>
 800380e:	0649      	lsls	r1, r1, #25
 8003810:	bf48      	it	mi
 8003812:	b2ad      	uxthmi	r5, r5
 8003814:	2f6f      	cmp	r7, #111	@ 0x6f
 8003816:	4853      	ldr	r0, [pc, #332]	@ (8003964 <_printf_i+0x238>)
 8003818:	6033      	str	r3, [r6, #0]
 800381a:	bf14      	ite	ne
 800381c:	230a      	movne	r3, #10
 800381e:	2308      	moveq	r3, #8
 8003820:	2100      	movs	r1, #0
 8003822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003826:	6866      	ldr	r6, [r4, #4]
 8003828:	60a6      	str	r6, [r4, #8]
 800382a:	2e00      	cmp	r6, #0
 800382c:	bfa2      	ittt	ge
 800382e:	6821      	ldrge	r1, [r4, #0]
 8003830:	f021 0104 	bicge.w	r1, r1, #4
 8003834:	6021      	strge	r1, [r4, #0]
 8003836:	b90d      	cbnz	r5, 800383c <_printf_i+0x110>
 8003838:	2e00      	cmp	r6, #0
 800383a:	d04b      	beq.n	80038d4 <_printf_i+0x1a8>
 800383c:	4616      	mov	r6, r2
 800383e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003842:	fb03 5711 	mls	r7, r3, r1, r5
 8003846:	5dc7      	ldrb	r7, [r0, r7]
 8003848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800384c:	462f      	mov	r7, r5
 800384e:	42bb      	cmp	r3, r7
 8003850:	460d      	mov	r5, r1
 8003852:	d9f4      	bls.n	800383e <_printf_i+0x112>
 8003854:	2b08      	cmp	r3, #8
 8003856:	d10b      	bne.n	8003870 <_printf_i+0x144>
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	07df      	lsls	r7, r3, #31
 800385c:	d508      	bpl.n	8003870 <_printf_i+0x144>
 800385e:	6923      	ldr	r3, [r4, #16]
 8003860:	6861      	ldr	r1, [r4, #4]
 8003862:	4299      	cmp	r1, r3
 8003864:	bfde      	ittt	le
 8003866:	2330      	movle	r3, #48	@ 0x30
 8003868:	f806 3c01 	strble.w	r3, [r6, #-1]
 800386c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003870:	1b92      	subs	r2, r2, r6
 8003872:	6122      	str	r2, [r4, #16]
 8003874:	f8cd a000 	str.w	sl, [sp]
 8003878:	464b      	mov	r3, r9
 800387a:	aa03      	add	r2, sp, #12
 800387c:	4621      	mov	r1, r4
 800387e:	4640      	mov	r0, r8
 8003880:	f7ff fee6 	bl	8003650 <_printf_common>
 8003884:	3001      	adds	r0, #1
 8003886:	d14a      	bne.n	800391e <_printf_i+0x1f2>
 8003888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800388c:	b004      	add	sp, #16
 800388e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	f043 0320 	orr.w	r3, r3, #32
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	4833      	ldr	r0, [pc, #204]	@ (8003968 <_printf_i+0x23c>)
 800389c:	2778      	movs	r7, #120	@ 0x78
 800389e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	6831      	ldr	r1, [r6, #0]
 80038a6:	061f      	lsls	r7, r3, #24
 80038a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80038ac:	d402      	bmi.n	80038b4 <_printf_i+0x188>
 80038ae:	065f      	lsls	r7, r3, #25
 80038b0:	bf48      	it	mi
 80038b2:	b2ad      	uxthmi	r5, r5
 80038b4:	6031      	str	r1, [r6, #0]
 80038b6:	07d9      	lsls	r1, r3, #31
 80038b8:	bf44      	itt	mi
 80038ba:	f043 0320 	orrmi.w	r3, r3, #32
 80038be:	6023      	strmi	r3, [r4, #0]
 80038c0:	b11d      	cbz	r5, 80038ca <_printf_i+0x19e>
 80038c2:	2310      	movs	r3, #16
 80038c4:	e7ac      	b.n	8003820 <_printf_i+0xf4>
 80038c6:	4827      	ldr	r0, [pc, #156]	@ (8003964 <_printf_i+0x238>)
 80038c8:	e7e9      	b.n	800389e <_printf_i+0x172>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	f023 0320 	bic.w	r3, r3, #32
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	e7f6      	b.n	80038c2 <_printf_i+0x196>
 80038d4:	4616      	mov	r6, r2
 80038d6:	e7bd      	b.n	8003854 <_printf_i+0x128>
 80038d8:	6833      	ldr	r3, [r6, #0]
 80038da:	6825      	ldr	r5, [r4, #0]
 80038dc:	6961      	ldr	r1, [r4, #20]
 80038de:	1d18      	adds	r0, r3, #4
 80038e0:	6030      	str	r0, [r6, #0]
 80038e2:	062e      	lsls	r6, r5, #24
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	d501      	bpl.n	80038ec <_printf_i+0x1c0>
 80038e8:	6019      	str	r1, [r3, #0]
 80038ea:	e002      	b.n	80038f2 <_printf_i+0x1c6>
 80038ec:	0668      	lsls	r0, r5, #25
 80038ee:	d5fb      	bpl.n	80038e8 <_printf_i+0x1bc>
 80038f0:	8019      	strh	r1, [r3, #0]
 80038f2:	2300      	movs	r3, #0
 80038f4:	6123      	str	r3, [r4, #16]
 80038f6:	4616      	mov	r6, r2
 80038f8:	e7bc      	b.n	8003874 <_printf_i+0x148>
 80038fa:	6833      	ldr	r3, [r6, #0]
 80038fc:	1d1a      	adds	r2, r3, #4
 80038fe:	6032      	str	r2, [r6, #0]
 8003900:	681e      	ldr	r6, [r3, #0]
 8003902:	6862      	ldr	r2, [r4, #4]
 8003904:	2100      	movs	r1, #0
 8003906:	4630      	mov	r0, r6
 8003908:	f7fc fc6a 	bl	80001e0 <memchr>
 800390c:	b108      	cbz	r0, 8003912 <_printf_i+0x1e6>
 800390e:	1b80      	subs	r0, r0, r6
 8003910:	6060      	str	r0, [r4, #4]
 8003912:	6863      	ldr	r3, [r4, #4]
 8003914:	6123      	str	r3, [r4, #16]
 8003916:	2300      	movs	r3, #0
 8003918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800391c:	e7aa      	b.n	8003874 <_printf_i+0x148>
 800391e:	6923      	ldr	r3, [r4, #16]
 8003920:	4632      	mov	r2, r6
 8003922:	4649      	mov	r1, r9
 8003924:	4640      	mov	r0, r8
 8003926:	47d0      	blx	sl
 8003928:	3001      	adds	r0, #1
 800392a:	d0ad      	beq.n	8003888 <_printf_i+0x15c>
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	079b      	lsls	r3, r3, #30
 8003930:	d413      	bmi.n	800395a <_printf_i+0x22e>
 8003932:	68e0      	ldr	r0, [r4, #12]
 8003934:	9b03      	ldr	r3, [sp, #12]
 8003936:	4298      	cmp	r0, r3
 8003938:	bfb8      	it	lt
 800393a:	4618      	movlt	r0, r3
 800393c:	e7a6      	b.n	800388c <_printf_i+0x160>
 800393e:	2301      	movs	r3, #1
 8003940:	4632      	mov	r2, r6
 8003942:	4649      	mov	r1, r9
 8003944:	4640      	mov	r0, r8
 8003946:	47d0      	blx	sl
 8003948:	3001      	adds	r0, #1
 800394a:	d09d      	beq.n	8003888 <_printf_i+0x15c>
 800394c:	3501      	adds	r5, #1
 800394e:	68e3      	ldr	r3, [r4, #12]
 8003950:	9903      	ldr	r1, [sp, #12]
 8003952:	1a5b      	subs	r3, r3, r1
 8003954:	42ab      	cmp	r3, r5
 8003956:	dcf2      	bgt.n	800393e <_printf_i+0x212>
 8003958:	e7eb      	b.n	8003932 <_printf_i+0x206>
 800395a:	2500      	movs	r5, #0
 800395c:	f104 0619 	add.w	r6, r4, #25
 8003960:	e7f5      	b.n	800394e <_printf_i+0x222>
 8003962:	bf00      	nop
 8003964:	08003b55 	.word	0x08003b55
 8003968:	08003b66 	.word	0x08003b66

0800396c <__malloc_lock>:
 800396c:	4801      	ldr	r0, [pc, #4]	@ (8003974 <__malloc_lock+0x8>)
 800396e:	f7ff bc73 	b.w	8003258 <__retarget_lock_acquire_recursive>
 8003972:	bf00      	nop
 8003974:	20000250 	.word	0x20000250

08003978 <__malloc_unlock>:
 8003978:	4801      	ldr	r0, [pc, #4]	@ (8003980 <__malloc_unlock+0x8>)
 800397a:	f7ff bc6e 	b.w	800325a <__retarget_lock_release_recursive>
 800397e:	bf00      	nop
 8003980:	20000250 	.word	0x20000250

08003984 <_realloc_r>:
 8003984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003988:	4680      	mov	r8, r0
 800398a:	4615      	mov	r5, r2
 800398c:	460c      	mov	r4, r1
 800398e:	b921      	cbnz	r1, 800399a <_realloc_r+0x16>
 8003990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003994:	4611      	mov	r1, r2
 8003996:	f7ff bddb 	b.w	8003550 <_malloc_r>
 800399a:	b92a      	cbnz	r2, 80039a8 <_realloc_r+0x24>
 800399c:	f000 f858 	bl	8003a50 <_free_r>
 80039a0:	2400      	movs	r4, #0
 80039a2:	4620      	mov	r0, r4
 80039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a8:	f000 f89c 	bl	8003ae4 <_malloc_usable_size_r>
 80039ac:	4285      	cmp	r5, r0
 80039ae:	4606      	mov	r6, r0
 80039b0:	d802      	bhi.n	80039b8 <_realloc_r+0x34>
 80039b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80039b6:	d8f4      	bhi.n	80039a2 <_realloc_r+0x1e>
 80039b8:	4629      	mov	r1, r5
 80039ba:	4640      	mov	r0, r8
 80039bc:	f7ff fdc8 	bl	8003550 <_malloc_r>
 80039c0:	4607      	mov	r7, r0
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d0ec      	beq.n	80039a0 <_realloc_r+0x1c>
 80039c6:	42b5      	cmp	r5, r6
 80039c8:	462a      	mov	r2, r5
 80039ca:	4621      	mov	r1, r4
 80039cc:	bf28      	it	cs
 80039ce:	4632      	movcs	r2, r6
 80039d0:	f000 f830 	bl	8003a34 <memcpy>
 80039d4:	4621      	mov	r1, r4
 80039d6:	4640      	mov	r0, r8
 80039d8:	f000 f83a 	bl	8003a50 <_free_r>
 80039dc:	463c      	mov	r4, r7
 80039de:	e7e0      	b.n	80039a2 <_realloc_r+0x1e>

080039e0 <memmove>:
 80039e0:	4288      	cmp	r0, r1
 80039e2:	b510      	push	{r4, lr}
 80039e4:	eb01 0402 	add.w	r4, r1, r2
 80039e8:	d902      	bls.n	80039f0 <memmove+0x10>
 80039ea:	4284      	cmp	r4, r0
 80039ec:	4623      	mov	r3, r4
 80039ee:	d807      	bhi.n	8003a00 <memmove+0x20>
 80039f0:	1e43      	subs	r3, r0, #1
 80039f2:	42a1      	cmp	r1, r4
 80039f4:	d008      	beq.n	8003a08 <memmove+0x28>
 80039f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039fe:	e7f8      	b.n	80039f2 <memmove+0x12>
 8003a00:	4402      	add	r2, r0
 8003a02:	4601      	mov	r1, r0
 8003a04:	428a      	cmp	r2, r1
 8003a06:	d100      	bne.n	8003a0a <memmove+0x2a>
 8003a08:	bd10      	pop	{r4, pc}
 8003a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a12:	e7f7      	b.n	8003a04 <memmove+0x24>

08003a14 <_sbrk_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4d06      	ldr	r5, [pc, #24]	@ (8003a30 <_sbrk_r+0x1c>)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	f7fd fc7e 	bl	8001320 <_sbrk>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_sbrk_r+0x1a>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_sbrk_r+0x1a>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	2000025c 	.word	0x2000025c

08003a34 <memcpy>:
 8003a34:	440a      	add	r2, r1
 8003a36:	4291      	cmp	r1, r2
 8003a38:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003a3c:	d100      	bne.n	8003a40 <memcpy+0xc>
 8003a3e:	4770      	bx	lr
 8003a40:	b510      	push	{r4, lr}
 8003a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a4a:	4291      	cmp	r1, r2
 8003a4c:	d1f9      	bne.n	8003a42 <memcpy+0xe>
 8003a4e:	bd10      	pop	{r4, pc}

08003a50 <_free_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	4605      	mov	r5, r0
 8003a54:	2900      	cmp	r1, #0
 8003a56:	d041      	beq.n	8003adc <_free_r+0x8c>
 8003a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a5c:	1f0c      	subs	r4, r1, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bfb8      	it	lt
 8003a62:	18e4      	addlt	r4, r4, r3
 8003a64:	f7ff ff82 	bl	800396c <__malloc_lock>
 8003a68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <_free_r+0x90>)
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	b933      	cbnz	r3, 8003a7c <_free_r+0x2c>
 8003a6e:	6063      	str	r3, [r4, #4]
 8003a70:	6014      	str	r4, [r2, #0]
 8003a72:	4628      	mov	r0, r5
 8003a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a78:	f7ff bf7e 	b.w	8003978 <__malloc_unlock>
 8003a7c:	42a3      	cmp	r3, r4
 8003a7e:	d908      	bls.n	8003a92 <_free_r+0x42>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	1821      	adds	r1, r4, r0
 8003a84:	428b      	cmp	r3, r1
 8003a86:	bf01      	itttt	eq
 8003a88:	6819      	ldreq	r1, [r3, #0]
 8003a8a:	685b      	ldreq	r3, [r3, #4]
 8003a8c:	1809      	addeq	r1, r1, r0
 8003a8e:	6021      	streq	r1, [r4, #0]
 8003a90:	e7ed      	b.n	8003a6e <_free_r+0x1e>
 8003a92:	461a      	mov	r2, r3
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	b10b      	cbz	r3, 8003a9c <_free_r+0x4c>
 8003a98:	42a3      	cmp	r3, r4
 8003a9a:	d9fa      	bls.n	8003a92 <_free_r+0x42>
 8003a9c:	6811      	ldr	r1, [r2, #0]
 8003a9e:	1850      	adds	r0, r2, r1
 8003aa0:	42a0      	cmp	r0, r4
 8003aa2:	d10b      	bne.n	8003abc <_free_r+0x6c>
 8003aa4:	6820      	ldr	r0, [r4, #0]
 8003aa6:	4401      	add	r1, r0
 8003aa8:	1850      	adds	r0, r2, r1
 8003aaa:	4283      	cmp	r3, r0
 8003aac:	6011      	str	r1, [r2, #0]
 8003aae:	d1e0      	bne.n	8003a72 <_free_r+0x22>
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	6053      	str	r3, [r2, #4]
 8003ab6:	4408      	add	r0, r1
 8003ab8:	6010      	str	r0, [r2, #0]
 8003aba:	e7da      	b.n	8003a72 <_free_r+0x22>
 8003abc:	d902      	bls.n	8003ac4 <_free_r+0x74>
 8003abe:	230c      	movs	r3, #12
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	e7d6      	b.n	8003a72 <_free_r+0x22>
 8003ac4:	6820      	ldr	r0, [r4, #0]
 8003ac6:	1821      	adds	r1, r4, r0
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	bf04      	itt	eq
 8003acc:	6819      	ldreq	r1, [r3, #0]
 8003ace:	685b      	ldreq	r3, [r3, #4]
 8003ad0:	6063      	str	r3, [r4, #4]
 8003ad2:	bf04      	itt	eq
 8003ad4:	1809      	addeq	r1, r1, r0
 8003ad6:	6021      	streq	r1, [r4, #0]
 8003ad8:	6054      	str	r4, [r2, #4]
 8003ada:	e7ca      	b.n	8003a72 <_free_r+0x22>
 8003adc:	bd38      	pop	{r3, r4, r5, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000258 	.word	0x20000258

08003ae4 <_malloc_usable_size_r>:
 8003ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae8:	1f18      	subs	r0, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bfbc      	itt	lt
 8003aee:	580b      	ldrlt	r3, [r1, r0]
 8003af0:	18c0      	addlt	r0, r0, r3
 8003af2:	4770      	bx	lr

08003af4 <_init>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr

08003b00 <_fini>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr
